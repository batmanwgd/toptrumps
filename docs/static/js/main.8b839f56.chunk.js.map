{"version":3,"sources":["toptrumps/battle.ts","toptrumps/BattleContext.tsx","toptrumps/CardInfo.tsx","toptrumps/constants.ts","toptrumps/PlayerContext.tsx","toptrumps/Card.tsx","toptrumps/Player.tsx","toptrumps/loader.ts","toptrumps/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["nextActiveIndex","state","nextIndex","activeIndex","players","length","nextPlayer","hand","stack","battleReducer","action","console","log","phase","actionType","allAliveHaveHands","every","player","map","key","undefined","slice","payload","leaderIndex","Error","openHand","open","rolling","selectedSkill","skillIndex","stateAfterShowHand","selectedSkillValues","skills","cargoCapacity","hyperdriveRating","costInCredits","winnerIndex","indexOf","Math","max","isFinal","filter","finalWinnerIndex","state1","ghostHand","state2","allGaveTheirHands","card","initialBattleState","name","nature","BattleContext","React","createContext","choices","setChoices","error","dispatch","BattleProvider","props","useState","useReducer","Provider","value","children","useBattleContext","useContext","Wrapper","styled","div","CardInfo","flash","setFlash","useEffect","setTimeout","selectable","handlers","choice","event","preventDefault","className","onClick","PlayerContext","isHuman","isWinner","stackLength","PlayerProvider","appear","keyframes","Card","openCard","active","isFlipped","flipDirection","e","choiceCallback","shine","disappear","partiallyDisappear","Player","isFinalWinner","out","stopPropagation","ghostCard","spaceships","playerDataToProps","data","Board","foes","me","tick","setTick","s","sort","random","spaceship","type","c1","c2","c3","c4","c5","c6","activePlayer","getNaturalAction","tickDelay","p","playerProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8b839f56.chunk.js","sourcesContent":["import { OpenCard, BattleState, PlayerData } from './types';\n\nexport type BattleAction =\n  | { actionType: 'Noop' }\n  | { actionType: 'StartLoading' }\n  | {\n      actionType: 'Loaded';\n      payload: Array<OpenCard[]>;\n    }\n  | { actionType: 'TakeTopCard' }\n  | { actionType: 'ShowLeaderHand' }\n  | { actionType: 'RollSkills' }\n  | { actionType: 'LetUserSelect' }\n  | { actionType: 'Select'; skillIndex: number }\n  | { actionType: 'ShowHand' }\n  | { actionType: 'StopBeforeShowHand' }\n  | { actionType: 'FindWinner' }\n  | { actionType: 'GiveHandToWinnerStack' }\n  | { actionType: 'EndTrick' }\n  | { actionType: 'StopBeforeEndGame' }\n  | { actionType: 'EndGame' };\n\nconst nextActiveIndex = (state: BattleState): number => {\n  const nextIndex = (state.activeIndex + 1) % state.players.length;\n  const nextPlayer = state.players[nextIndex];\n  if (!nextPlayer.hand && nextPlayer.stack.length === 0) {\n    return (state.activeIndex + 2) % state.players.length;\n  }\n  return nextIndex;\n}\n\nexport const battleReducer = (state: BattleState, action: BattleAction): BattleState => {\n  console.log('State:', state.phase, ' + ', action.actionType);\n  switch (action.actionType) {\n    case 'TakeTopCard':\n      const allAliveHaveHands = state.players.every((player: PlayerData) => {\n        return player.hand || player.stack.length === 0;\n      });\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          if (key === state.activeIndex) {\n            if (player.hand === undefined) {\n              const hand = player.stack.slice(-1)[0];\n              const stack = player.stack.slice(0, -1);\n              return { ...player, stack, hand };\n            }\n          }\n          return player;\n        }),\n        activeIndex: allAliveHaveHands ? state.activeIndex : nextActiveIndex(state),\n        phase: allAliveHaveHands ? 'closed' : 'clear',\n      };\n\n    case 'StartLoading':\n      return {\n        ...state,\n        phase: 'loading',\n      };\n\n    case 'Loaded':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          return {\n            ...player,\n            stack: action.payload[key],\n          };\n        }),\n        phase: 'clear',\n      };\n\n    case 'ShowLeaderHand':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          if (key === state.leaderIndex) {\n            const hand = player.hand as OpenCard;\n            if (!hand) {\n              throw new Error('Leader has no hand so cannot show it');\n            }\n            const openHand: OpenCard = { ...hand, open: true };\n            return { ...player, hand: openHand };\n          }\n          return player;\n        }),\n        phase: 'one_open',\n      };\n\n    case 'RollSkills':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          if (key === state.leaderIndex) {\n            const hand = player.hand as OpenCard;\n            if (!hand) {\n              throw new Error('Leader has no hand so cannot roll it');\n            }\n            const openHand: OpenCard = { ...hand, rolling: true };\n            return { ...player, hand: openHand };\n          }\n          return player;\n        }),\n        phase: 'rolling',\n      };\n\n    case 'LetUserSelect':\n      return {\n        ...state,\n        phase: 'rolling_stopped',\n      };\n\n    case 'Select':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          if (key === state.leaderIndex) {\n            const hand = player.hand as OpenCard;\n            if (!hand) {\n              throw new Error('Leader has no hand so cannot roll it');\n            }\n            const openHand: OpenCard = { ...hand, rolling: false };\n            return { ...player, hand: openHand };\n          }\n          return player;\n        }),\n        phase: 'selected',\n        activeIndex: nextActiveIndex(state),\n        selectedSkill: action.skillIndex,\n      };\n\n    case 'ShowHand':\n      const stateAfterShowHand: BattleState = {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          if (key === state.activeIndex) {\n            const hand = player.hand as OpenCard;\n            if (!hand) {\n              throw new Error('Active player has no hand so cannot show it');\n            }\n            const openHand: OpenCard = { ...hand, open: true };\n            return { ...player, hand: openHand };\n          }\n          return player;\n        }),\n        phase: 'selected',\n\n        activeIndex: nextActiveIndex(state),\n      };\n      if (\n        stateAfterShowHand.players.every((player: PlayerData) => {\n          return player.hand === undefined || player.hand.open;\n        })\n      ) {\n        stateAfterShowHand.phase = 'all_open';\n      }\n      return stateAfterShowHand;\n\n    case 'StopBeforeShowHand':\n      return {\n        ...state,\n        phase: 'selected_stopped',\n      };\n\n    case 'FindWinner':\n      const selectedSkillValues = state.players.map((player: PlayerData) => {\n        if (!player.hand) {\n          return 0;\n        }\n        switch (state.selectedSkill) {\n          case 0:\n            return player.hand.skills.cargoCapacity;\n          case 1:\n            return player.hand.skills.hyperdriveRating;\n          case 2:\n            return player.hand.skills.costInCredits;\n          case 3:\n            return player.hand.skills.length;\n        }\n        return 0;\n      });\n\n      const winnerIndex = selectedSkillValues.indexOf(Math.max(...selectedSkillValues));\n      const playerHavingSomething = state.players.filter((player: PlayerData) => {\n        return player.hand || player.stack.length > 0;\n      });\n\n      const isFinal = playerHavingSomething.length < 2;\n      return {\n        ...state,\n        leaderIndex: winnerIndex,\n        activeIndex: (winnerIndex + 1) % state.players.length,\n        winnerIndex,\n        finalWinnerIndex: isFinal ? winnerIndex : undefined,\n      };\n\n    case 'GiveHandToWinnerStack':\n      const state1: BattleState = {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          if (key === state.activeIndex) {\n            return {\n              ...player,\n              ghostHand: player.hand,\n              hand: undefined,\n            };\n          }\n          return player;\n        }),\n      };\n\n      const ghostHand = state.players[state.activeIndex].hand;\n\n      const state2 = ghostHand\n        ? {\n            ...state,\n            players: state1.players.map((player: PlayerData, key) => {\n              if (key === state.leaderIndex) {\n                return {\n                  ...player,\n                  stack: [ghostHand, ...player.stack],\n                };\n              }\n              return player;\n            }),\n          }\n        : state;\n\n      const allGaveTheirHands = state2.players.every((player: PlayerData) => {\n        return player.hand === undefined;\n      });\n\n      return {\n        ...state2,\n        phase: allGaveTheirHands ? 'finalize' : 'all_open',\n        activeIndex: nextActiveIndex(state),\n      };\n\n    case 'StopBeforeEndGame':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData) => {\n          return {\n            ...player,\n            ghostHand: undefined,\n          };\n        }),\n        phase: 'finalize_stopped',\n      };\n\n    case 'EndTrick':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData) => {\n          return {\n            ...player,\n            stack: player.stack.map((card: OpenCard) => {\n              return {\n                ...card,\n                open: false,\n              };\n            }),\n            ghostHand: undefined,\n            hand: undefined,\n          };\n        }),\n        winnerIndex: undefined,\n        activeIndex: state.leaderIndex,\n        phase: 'clear',\n        selectedSkill: undefined,\n      };\n    case 'EndGame':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData) => {\n          return {\n            ...player,\n            ghostHand: undefined,\n            hand: undefined,\n            stack: [],\n          };\n        }),\n        winnerIndex: undefined,\n        activeIndex: state.leaderIndex,\n        phase: 'clear',\n        selectedSkill: undefined,\n      };\n  }\n\n  return state;\n};\n\nexport const getNaturalAction = (state: BattleState): BattleAction => {\n  const activePlayer = state.players[state.activeIndex];\n  switch (state.phase) {\n    case 'clear':\n      const allHaveNothing = state.players.every((player: PlayerData) => {\n        return !player.hand && player.stack.length === 0;\n      });\n      if (allHaveNothing) {\n        return { actionType: 'StartLoading' };\n      }\n      return { actionType: 'TakeTopCard' };\n    case 'closed':\n      return { actionType: 'ShowLeaderHand' };\n    case 'one_open':\n      return { actionType: 'RollSkills' };\n    case 'rolling':\n      if (activePlayer.nature === 'human') {\n        return { actionType: 'LetUserSelect' };\n      }\n      return { actionType: 'Select', skillIndex: 1 };\n    case 'selected':\n      if (activePlayer.nature === 'human') {\n        return { actionType: 'StopBeforeShowHand' };\n      }\n      return { actionType: 'ShowHand' };\n    case 'all_open':\n      if (state.winnerIndex === undefined) {\n        return { actionType: 'FindWinner' };\n      }\n      return { actionType: 'GiveHandToWinnerStack' };\n    case 'finalize':\n      const playersStillHavingCards = state.players.filter((player: PlayerData) => {\n        return player.stack.length > 0 || player.hand;\n      });\n      if (playersStillHavingCards.length > 1) {\n        return { actionType: 'EndTrick' };\n      }\n      return { actionType: 'StopBeforeEndGame' };\n  }\n\n  return { actionType: 'Noop' };\n};\n","import React, { useState, useReducer } from 'react';\nimport { BattleState } from './types';\nimport { BattleAction, battleReducer } from './battle';\n\ntype Choice = () => void;\ntype Choices = Choice[];\n\nconst initialBattleState: BattleState = {\n  players: [\n    { name: 'gitanas nauseda', stack: [], nature: 'bot' },\n    { name: 'celofanas', stack: [], nature: 'bot' },\n    { name: 'luke 10x', stack: [], nature: 'human' },\n  ],\n  leaderIndex: 2,\n  activeIndex: 2,\n  phase: 'clear',\n};\n\ninterface BattleContextProps {\n  choices: Choices;\n  setChoices: (choices: Choices) => void;\n  state: BattleState;\n  dispatch: (action: BattleAction) => void;\n}\n\nexport const BattleContext = React.createContext<BattleContextProps>({\n  choices: [],\n  setChoices: () => {\n    console.error('😕 Context setter called before it is initialized');\n  },\n  state: initialBattleState,\n  dispatch: () => {\n    console.error('😕 Context dispatch called before it is initialized');\n  },\n});\n\nexport const BattleProvider: React.FC = (props: any) => {\n  const [choices, setChoices] = useState<Choices>([]);\n  const [state, dispatch] = useReducer<React.Reducer<BattleState, BattleAction>>(battleReducer, initialBattleState);\n\n  return (\n    <BattleContext.Provider\n      value={{\n        choices,\n        setChoices,\n        state,\n        dispatch,\n      }}\n    >\n      {props.children}\n    </BattleContext.Provider>\n  );\n};\n\nexport const useBattleContext = (): BattleContextProps => React.useContext(BattleContext);\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport { Card as CardType, OpenCard } from './types';\nimport { breakpointSmall } from './constants';\nimport { useBattleContext } from './BattleContext';\n\nconst Wrapper = styled.div`\n  height: 100%;\n  margin: 1px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n\n  background: #ffeb3b;\n  border: 3px solid #f1b31c;\n  border-radius: 5pt;\n  box-sizing: border-box;\n\n  .name {\n    font-size: 0.75em;\n  }\n  ul.scores {\n    padding-left: 0;\n    margin: 0;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n\n    list-style: none;\n    li.abilityLine {\n      :hover {\n        cursor: pointer;\n      }\n      padding: 10pt;\n      display: flex;\n      &.flash {\n        background: #f1b31c;\n      }\n      &.selected {\n        background: #f1b31c;\n      }\n      .ability {\n        flex: 1;\n        text-align: left;\n      }\n      .value {\n        padding-left: 10pt;\n        text-align: left;\n      }\n    }\n  }\n  @media (max-width: ${breakpointSmall}) {\n    ul.scores {\n      font-size: 0.75em;\n      display: flex;\n      flex-direction: row;\n      li.abilityLine {\n        flex-direction: column;\n        padding: 5pt;\n        .value {\n          padding-left: 0;\n        }\n      }\n    }\n  }\n`;\n\ninterface CardInfoProps {\n  card: CardType;\n}\n\nexport const CardInfo: React.FC<CardInfoProps> = (props: CardInfoProps) => {\n  const card = props.card as OpenCard;\n\n  const [flash, setFlash] = useState<number>(-1);\n\n  const {\n    state: { selectedSkill, phase },\n    choices,\n  } = useBattleContext();\n\n  const rolling = card.rolling && selectedSkill === undefined;\n  useEffect(() => {\n    if (rolling) {\n      setTimeout(() => {\n        setFlash((flash + 1) % 4);\n      }, 200);\n    } else if (selectedSkill !== undefined) {\n      setFlash(-1);\n    }\n  }, [flash, rolling, selectedSkill]);\n\n  const selectable = phase === 'rolling_stopped';\n\n  const handlers = choices.map((choice: () => void) => {\n    return (event: React.MouseEvent<HTMLElement>) => {\n      event?.preventDefault();\n      if (selectable) {\n        choice();\n      }\n    };\n  });\n\n  return (\n    <Wrapper className=\"card\">\n      <div className=\"name\">{card.name}</div>\n      <ul className=\"scores\">\n        <li\n          className={`abilityLine ${selectable ? 'selectable' : ''} ${flash === 0 ? 'flash' : ''} ${\n            selectedSkill === 0 ? 'selected' : ''\n          }`}\n          onClick={handlers[0]}\n        >\n          <span className=\"ability\">Cost:</span>\n          <span className=\"value\">{card.skills.costInCredits}</span>\n        </li>\n        <li\n          className={`abilityLine ${selectable ? 'selectable' : ''} ${flash === 1 ? 'flash' : ''} ${\n            selectedSkill === 1 ? 'selected' : ''\n          }`}\n          onClick={handlers[1]}\n        >\n          <span className=\"ability\">H-Rating:</span>\n          <span className=\"value\">{card.skills.hyperdriveRating}</span>\n        </li>\n        <li\n          className={`abilityLine ${selectable ? 'selectable' : ''} ${flash === 2 ? 'flash' : ''} ${\n            selectedSkill === 2 ? 'selected' : ''\n          }`}\n          onClick={handlers[2]}\n        >\n          <span className=\"ability\">Length:</span>\n          <span className=\"value\">{card.skills.length}</span>\n        </li>\n        <li\n          className={`abilityLine ${selectable ? 'selectable' : ''} ${flash === 3 ? 'flash' : ''} ${\n            selectedSkill === 3 ? 'selected' : ''\n          }`}\n          onClick={handlers[3]}\n        >\n          <span className=\"ability\">Cargo:</span>\n          <span className=\"value\">{card.skills.cargoCapacity}</span>\n        </li>\n      </ul>\n    </Wrapper>\n  );\n};\n","export const breakpointSmall = '620px';\n","import React from 'react';\nimport { PlayerProps } from './Player';\n\nexport const PlayerContext = React.createContext<PlayerProps>({\n  isHuman: true,\n  name: 'not set',\n  isWinner: false,\n  stackLength: 0,\n});\n\nexport const PlayerProvider: React.FC = (props: any) => {\n  return <PlayerContext.Provider value={props}>{props.children}</PlayerContext.Provider>;\n};\n\nexport const usePlayerContext = (): PlayerProps => React.useContext(PlayerContext);\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nimport { Card as CardType, OpenCard } from './types';\nimport ReactCardFlip from 'react-card-flip';\nimport { CardInfo } from './CardInfo';\nimport { useBattleContext } from './BattleContext';\nimport { usePlayerContext } from './PlayerContext';\n\nconst appear = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\n\nconst Wrapper = styled.div`\n  height: 100%;\n\n  .react-card-flip {\n    height: 100%;\n  }\n\n  .back {\n    animation: ${appear} 0.2s linear;\n    border: 3px solid #61b2e4;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 5pt;\n\n    box-sizing: border-box;\n    background: #92d3f5;\n    .text {\n      text-align: center;\n      color: #fff;\n    }\n  }\n  .active.back {\n    border: 3px solid #d22f27;\n    background: #ea5a47;\n    cursor: pointer;\n  }\n`;\n\ninterface CardProps {\n  card: CardType;\n}\n\nexport const Card: React.FC<CardProps> = (props: CardProps) => {\n  const card = props.card;\n  const openCard = card as OpenCard;\n\n  const { choices } = useBattleContext();\n\n  const { isHuman } = usePlayerContext();\n\n  const active = choices.length === 1 && isHuman;\n\n  const handleBackClick = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    if (active) {\n      const choiceCallback = choices[0];\n      choiceCallback();\n    }\n  };\n\n  return (\n    <Wrapper>\n      <ReactCardFlip isFlipped={openCard.open} flipDirection=\"horizontal\">\n        <div className={`back ${active ? 'active' : ''}`} onClick={handleBackClick}>\n          {active && <div className=\"text\">Show your card!</div>}\n        </div>\n        <CardInfo card={card} />\n      </ReactCardFlip>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Card } from './types';\nimport { Card as CardComponent } from './Card';\nimport { breakpointSmall } from './constants';\nimport { useBattleContext } from './BattleContext';\n\nconst shine = keyframes`\n  {\n    0% {\n      background: auto;\n    }\n    50% {\n      background: #ea5a47;\n    }\n    100% {\n      background: auto;\n    }\n  }\n`;\n\nconst disappear = keyframes`\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n`;\n\nconst partiallyDisappear = keyframes`\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0.5;\n  }\n`;\n\nconst Wrapper = styled.div`\n  margin-top: 5pt;\n  &:first-child {\n    margin-top: 0;\n  }\n\n  height: 100%;\n  .player {\n    &.out {\n      animation: ${partiallyDisappear} 0.2s linear;\n      opacity: 0.5;\n    }\n    &.winner {\n      cursor: pointer;\n    }\n    text-transform: uppercase;\n    border-radius: 5px;\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    .ghost {\n      animation: ${disappear} 0.2s linear;\n      opacity: 0;\n    }\n    .winner .card .selected {\n      animation: ${shine} 1s linear;\n      animation-iteration-count: infinite;\n    }\n    & > .title {\n      font-size: 0.75em;\n      padding: 6pt 0;\n\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      span.winner {\n        color: #d22f27;\n      }\n      & > .name {\n        text-align: left;\n      }\n      & > .stack::before {\n        content: '⨯ ';\n        color: #999;\n      }\n    }\n    background: white;\n    padding: 5pt;\n\n    width: 240px;\n    .player-content {\n      height: 220px;\n      & > div {\n        height: 100%;\n      }\n    }\n    @media (max-width: ${breakpointSmall}) {\n      width: auto;\n      min-width: 300px;\n      .player-content {\n        height: 100px;\n        .react-card-flip .react-card-back .card {\n          height: 100%;\n        }\n      }\n    }\n  }\n`;\n\nexport interface PlayerProps {\n  name: string;\n  card?: Card;\n  ghostCard?: Card;\n  stackLength: number;\n  isHuman: boolean;\n  isWinner: boolean;\n}\n\nexport const Player: React.FC<PlayerProps> = (props: PlayerProps) => {\n  const {\n    state: { phase },\n    choices,\n  } = useBattleContext();\n\n  const isFinalWinner = phase === 'finalize_stopped' && props.stackLength > 0;\n\n  const handlePlayerClick = (e: React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    if (!isFinalWinner) {\n      return;\n    }\n    const choice = choices[0];\n    choice();\n  };\n  const out = !props.card && props.stackLength === 0;\n  return (\n    <Wrapper>\n      <div className={`player ${out ? 'out' : ''} ${isFinalWinner ? 'winner' : ''}`} onClick={handlePlayerClick}>\n        <div className=\"title\">\n          <div className=\"name\">\n            {props.name}\n            {isFinalWinner && <span className=\"winner\"> Winner 🎉</span>}\n          </div>\n          <div className=\"stack\">{props.stackLength}</div>\n        </div>\n        <div className=\"player-content\">\n          {props.card && (\n            <div className={`hand ${props.isWinner ? 'winner' : ''}`}>\n              <CardComponent card={props.card} />\n            </div>\n          )}\n          {props.ghostCard && (\n            <div className=\"ghost\">\n              <CardComponent card={props.ghostCard} />\n            </div>\n          )}\n        </div>\n      </div>\n    </Wrapper>\n  );\n};\n","import spaceshipData from './spaceships.json';\nimport { OpenCard } from './types';\n\ninterface Spaceship {\n  name: string;\n  hyperdriveRating: number;\n  length: number;\n  costInCredits: number;\n  cargoCapacity: number;\n}\n\nconst spaceships = spaceshipData as Spaceship[];\n\nexport const loadRandomCards = (): OpenCard[] => {\n  const allCards: OpenCard[] = spaceships\n    .filter((s: Spaceship) => s.cargoCapacity && s.costInCredits && s.hyperdriveRating && s.length)\n    .sort(() => Math.random() - 0.5)\n    .map((spaceship: Spaceship) => {\n      return {\n        type: 'open',\n        name: spaceship.name,\n        skills: {\n          hyperdriveRating: spaceship.hyperdriveRating,\n          length: spaceship.length,\n          costInCredits: spaceship.costInCredits,\n          cargoCapacity: spaceship.cargoCapacity,\n        },\n        open: false,\n        rolling: false,\n      };\n    });\n  return allCards;\n\n};\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Player } from './Player';\nimport { breakpointSmall } from './constants';\nimport { getNaturalAction } from './battle';\nimport { PlayerData } from './types';\nimport { useBattleContext } from './BattleContext';\nimport { loadRandomCards } from './loader';\nimport { PlayerProvider } from './PlayerContext';\n\nconst playerDataToProps = (data: PlayerData, isWinner: boolean) => {\n  return {\n    name: data.name,\n    card: data.hand,\n    ghostCard: data.ghostHand,\n    stackLength: data.stack.length,\n    isHuman: data.nature === 'human',\n    isWinner: isWinner,\n  };\n};\n\nconst Wrapper = styled.div`\n  font-size: 1em;\n  height: 100%;\n\n  display: flex;\n  flex-direction: column;\n\n  .content {\n    height: 100%;\n\n    flex: 1 1;\n  }\n  div.players {\n    padding: 5pt;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n  }\n\n  .footer {\n    flex: 0 1;\n  }\n\n  @media (max-width: ${breakpointSmall}) {\n    div.players {\n      flex-direction: column;\n      justify-content: flex-start;\n      align-items: stretch;\n    }\n  }\n`;\n\nexport const Board: React.FC = () => {\n  const { state, dispatch, setChoices } = useBattleContext();\n\n  const foes = state.players.slice(0, -1);\n  const me: PlayerData = state.players.slice(-1)[0];\n\n  const [tick, setTick] = useState<number>(0);\n  useEffect(() => {\n    if (state.phase === 'loading') {\n      // TODO move this to apollo hook later\n      setTimeout(() => {\n        const [c1, c2, c3, c4, c5, c6] = loadRandomCards();\n        dispatch({\n          actionType: 'Loaded',\n          // payload: [[c1], [c2], [c3]],\n          payload: [\n            [c1, c4],\n            [c2, c5],\n            [c3, c6],\n          ],\n        });\n        setTick(tick + 1);\n      }, 500);\n    } else if (state.phase === 'selected_stopped') {\n      setChoices([\n        () => {\n          dispatch({ actionType: 'ShowHand' });\n          setTimeout(() => {\n            setTick(tick + 1);\n          }, 600);\n        },\n      ]);\n    } else if (state.phase === 'rolling_stopped') {\n      setChoices([\n        () => {\n          dispatch({ actionType: 'Select', skillIndex: 0 });\n          setTimeout(() => {\n            setTick(tick + 1);\n          }, 600);\n        },\n        () => {\n          dispatch({ actionType: 'Select', skillIndex: 1 });\n          setTimeout(() => {\n            setTick(tick + 1);\n          }, 600);\n        },\n        () => {\n          dispatch({ actionType: 'Select', skillIndex: 2 });\n          setTimeout(() => {\n            setTick(tick + 1);\n          }, 600);\n        },\n        () => {\n          dispatch({ actionType: 'Select', skillIndex: 3 });\n          setTimeout(() => {\n            setTick(tick + 1);\n          }, 600);\n        },\n      ]);\n    } else if (state.phase === 'finalize_stopped') {\n      setChoices([\n        () => {\n          dispatch({ actionType: 'EndGame' });\n          setTick(tick + 1);\n        },\n      ]);\n    } else {\n      setChoices([]);\n    }\n  }, [state.phase]);\n\n  useEffect(() => {\n    const action = getNaturalAction(state);\n    dispatch(action);\n\n    if (action.actionType === 'StartLoading') {\n      return;\n    }\n\n    if (action.actionType === 'LetUserSelect') {\n      return;\n    }\n\n    if (action.actionType === 'StopBeforeShowHand') {\n      return;\n    }\n\n    if (action.actionType === 'StopBeforeEndGame') {\n      return;\n    }\n\n    const tickDelay = (() => {\n      if (action.actionType === 'RollSkills') {\n        return 2000;\n      }\n      if (action.actionType === 'FindWinner') {\n        return 4000;\n      }\n      return 600;\n    })();\n    setTimeout(() => {\n      setTick(tick + 1);\n    }, tickDelay);\n  }, [tick]);\n\n  return (\n    <Wrapper>\n      <div className=\"content\">\n        <div className=\"players them\">\n          {foes.map((p: PlayerData, key: number) => {\n            const isWinner = key === state.winnerIndex;\n            const playerProps = playerDataToProps(p, isWinner);\n            return (\n              <PlayerProvider key={key} {...playerProps}>\n                <Player {...playerProps} />\n              </PlayerProvider>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"footer\">\n        <div className=\"players us\">\n          <Player {...playerDataToProps(me, state.winnerIndex === foes.length)} />\n        </div>\n      </div>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport './App.css';\n\nimport { Board } from './toptrumps/Board';\nimport { BattleProvider } from './toptrumps/BattleContext';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <BattleProvider>\n        <Board />\n      </BattleProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}