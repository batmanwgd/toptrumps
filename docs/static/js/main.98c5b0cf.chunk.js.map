{"version":3,"sources":["setup/Form.tsx","toptrumps/constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Item","styled","div","Wrapper","Form","useState","opponents","undefined","user","cardNumber","state","setState","className","map","name","key","id","defaultValue","onChange","ev","preventDefault","value","opponent","index","editOpponent","currentTarget","htmlFor","onClick","removeOpponent","addOpponent","length","defaultName","parseInt","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.98c5b0cf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { breakpointSmall } from '../toptrumps/constants';\n\ninterface SetupState {\n  opponents: (string | undefined)[];\n  user: string;\n  cardNumber: number;\n}\n\nconst Item = styled.div`\n  padding-bottom: 5pt;\n  color: white;\n  width: 240px;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  & > .clickable {\n    cursor: pointer;\n  }\n\n  @media (max-width: ${breakpointSmall}) {\n    width: 100%;\n\n    box-sizing: border-box;\n\n    flex-direction: row;\n    justify-content: center;\n\n    & > input {\n      flex: 1 0;\n    }\n\n    & > label {\n      flex: 0 1;\n    }\n    height: 40px;\n  }\n`;\n\nconst Wrapper = styled.div`\n  font-size: 1em;\n  height: 100%;\n\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n\n  text-transform: uppercase;\n\n  h2 {\n    border: 0;\n    border-bottom: 2px solid white;\n    color: white;\n    font-size: 0.75em;\n  }\n  .content {\n    height: 100%;\n\n    flex: 1 1;\n  }\n  div.players {\n    padding: 5pt;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: stretch;\n  }\n  .footer {\n    padding: 5pt;\n    flex: 0 1;\n    margin: 0 auto;\n    button {\n      text-transform: uppercase;\n      cursor: pointer;\n      display: block;\n      height: 60px;\n      width: 240px;\n    }\n  }\n\n  @media (max-width: ${breakpointSmall}) {\n    div.players {\n      flex-direction: column;\n      justify-content: flex-start;\n      align-items: stretch;\n    }\n    .footer {\n      margin: 0;\n\n      button {\n        width: 100%;\n      }\n    }\n  }\n`;\n\nexport const Form: React.FC = () => {\n  const [state, setState] = useState<SetupState>({\n    opponents: ['Alice', undefined, undefined],\n    user: 'me',\n    cardNumber: 3,\n  });\n\n  const addOpponent = (key: number) => {\n    const opponents = state.opponents.map((opponent: string | undefined, index: number) => {\n      if (index === key) {\n        return ['Alice', 'Bob', 'Charley'][index];\n      }\n      return opponent;\n    });\n    setState({\n      ...state,\n      opponents,\n    });\n  };\n  const removeOpponent = (key: number) => {\n    const opponents = state.opponents.map((opponent: string | undefined, index: number) => {\n      if (index === key) {\n        return undefined;\n      }\n      return opponent;\n    });\n    setState({\n      ...state,\n      opponents,\n    });\n  };\n\n  const editOpponent = (key: number, value: string) => {\n    const opponents = state.opponents.map((opponent: string | undefined, index: number) => {\n      if (index === key) {\n        return value;\n      }\n      return opponent;\n    });\n    setState({\n      ...state,\n      opponents,\n    });\n  };\n\n  const editUser = (value: string) => {\n    setState({\n      ...state,\n      user: value,\n    });\n  };\n\n  const handleEditUser = (ev: React.FormEvent<HTMLInputElement>) => {\n    ev.preventDefault();\n    editUser(ev.currentTarget.value);\n  };\n\n  const handleAddOpponent = (ev: React.MouseEvent<HTMLElement>) => {\n    ev.preventDefault();\n    const defaultName = ['Alice', 'Bob', 'Charley'][state.opponents.length];\n\n    setState({\n      ...state,\n      opponents: [...state.opponents, defaultName],\n    });\n  };\n\n  const handleCardSelect = (ev: React.FormEvent<HTMLSelectElement>) => {\n    ev.preventDefault();\n    setState({\n      ...state,\n      cardNumber: parseInt(ev.currentTarget.value),\n    });\n  };\n\n\n  const handleSubmit = (ev: React.FormEvent<HTMLButtonElement>) => {\n    ev.preventDefault();\n    console.log('CONFIG STATE', state);\n  };\n  return (\n    <Wrapper>\n      <div className=\"content\">\n        <h2>Opponents:</h2>\n        <div className=\"players them\">\n          {state.opponents.map((name: string | undefined, key: number) => {\n            const handleRemove = (ev: React.MouseEvent<HTMLElement>) => {\n              ev.preventDefault();\n              removeOpponent(key);\n            };\n            const handleEdit = (ev: React.FormEvent<HTMLInputElement>) => {\n              ev.preventDefault();\n              editOpponent(key, ev.currentTarget.value);\n            };\n            const handleAdd = (ev: React.MouseEvent<HTMLElement>) => {\n              ev.preventDefault();\n              addOpponent(key);\n            };\n            if (name !== undefined) {\n              return (\n                <Item key={key}>\n                  <input id={`input-${key}`} defaultValue={name} onChange={handleEdit} />\n                  <label className=\"clickable\" htmlFor={`input-${key}`} onClick={handleRemove}>\n                    remove ⊗\n                  </label>\n                </Item>\n              );\n            }\n            if (name === undefined) {\n              return (\n                <Item onClick={handleAdd}>\n                  <div className=\"clickable\">\n                    <span>⊕</span>Add Opponent\n                  </div>\n                </Item>\n              );\n            }\n          })}\n          {state.opponents.length < 3 && (\n            <Item onClick={handleAddOpponent}>\n              <div className=\"clickable\">\n                <span>⊕</span>Add Opponent\n              </div>\n            </Item>\n          )}\n        </div>\n        <h2>your name:</h2>\n        <div className=\"players them\">\n          <Item>\n            <input id={`input-me`} onChange={handleEditUser} defaultValue={state.user} />\n          </Item>\n        </div>\n        <h2>settings</h2>\n        <select onChange={handleCardSelect} value={state.cardNumber}>\n          <option value=\"1\">1 card</option>\n          <option value=\"3\">3 cards</option>\n          <option value=\"5\">5 cards</option>\n        </select>\n      </div>\n\n      <div className=\"footer\">\n        <button onClick={handleSubmit}>Play Top trumps</button>\n      </div>\n    </Wrapper>\n  );\n};\n","export const breakpointSmall = '620px';\n","import React from 'react';\nimport './App.css';\n\nimport { Form } from './setup/Form';\nimport { Board } from './toptrumps/Board';\nimport { BattleProvider } from './toptrumps/BattleContext';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      {/* <BattleProvider>\n        <Board />\n      </BattleProvider> */}\n      <Form />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}