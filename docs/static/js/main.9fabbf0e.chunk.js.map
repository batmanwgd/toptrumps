{"version":3,"sources":["setup/SettingsContext.tsx","setup/Form.tsx","toptrumps/constants.ts","toptrumps/battle.ts","toptrumps/BattleContext.tsx","toptrumps/CardInfo.tsx","toptrumps/PlayerContext.tsx","toptrumps/Card.tsx","toptrumps/Player.tsx","toptrumps/loader.ts","toptrumps/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialSettings","opponents","undefined","user","cardNumber","SettingsContext","React","createContext","state","setState","console","error","SettingsProvider","props","useState","value","Provider","children","useSettingsContext","useContext","Item","styled","div","Wrapper","Form","history","useHistory","className","map","name","key","id","defaultValue","onChange","ev","preventDefault","opponent","index","editOpponent","currentTarget","htmlFor","onClick","removeOpponent","addOpponent","length","defaultName","parseInt","every","alert","push","nextActiveIndex","nextIndex","activeIndex","players","nextPlayer","hand","stack","battleReducer","action","log","phase","actionType","settings","filter","nature","leaderIndex","allAliveHaveHands","player","slice","payload","Error","openHand","open","rolling","selectedSkill","skillIndex","stateAfterShowHand","selectedSkillValues","skills","cargoCapacity","hyperdriveRating","costInCredits","winnerIndex","values","max","i","getMaxIndex","Math","isFinal","finalWinnerIndex","state1","ghostHand","state2","allGaveTheirHands","card","initialBattleState","BattleContext","choices","setChoices","dispatch","BattleProvider","useReducer","useBattleContext","CardInfo","flash","setFlash","useEffect","setTimeout","selectable","handlers","choice","event","PlayerContext","isHuman","isWinner","stackLength","PlayerProvider","appear","keyframes","Card","openCard","active","isFlipped","flipDirection","e","choiceCallback","shine","disappear","partiallyDisappear","Player","isFinalWinner","out","stopPropagation","ghostCard","spaceships","playerDataToProps","data","Winner","Board","foes","me","tick","setTick","randomCards","s","sort","random","spaceship","type","j","shift","activePlayer","getNaturalAction","tickDelay","to","p","playerProps","App","basename","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9fabbf0e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { SettingsState } from './settings';\n\nconst initialSettings: SettingsState = {\n  opponents: ['Alice', undefined, undefined],\n  user: 'me',\n  cardNumber: 3,\n};\n\ninterface SettingsContextProps {\n  state: SettingsState;\n  setState: (settings: SettingsState) => void;\n}\n\nexport const SettingsContext = React.createContext<SettingsContextProps>({\n  state: initialSettings,\n  setState: () => {\n    console.error('😕 Settings context setter called before it is initialized');\n  },\n});\n\nexport const SettingsProvider: React.FC = (props: any) => {\n  const [state, setState] = useState<SettingsState>(initialSettings);\n\n  const value: SettingsContextProps = {\n    state,\n    setState,\n  };\n\n  return <SettingsContext.Provider value={value}>{props.children}</SettingsContext.Provider>;\n};\n\nexport const useSettingsContext = (): SettingsContextProps => React.useContext(SettingsContext);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { breakpointSmall } from '../toptrumps/constants';\nimport { useSettingsContext } from './SettingsContext';\nimport { useHistory } from 'react-router-dom';\n\nconst Item = styled.div`\n  padding-bottom: 10pt;\n  color: white;\n  width: 240px;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  & > .clickable {\n    cursor: pointer;\n  }\n\n  & > .add {\n    height: 40px;\n  }\n\n  @media (max-width: ${breakpointSmall}) {\n    width: 100%;\n\n    box-sizing: border-box;\n\n    flex-direction: row;\n    justify-content: center;\n    align-items: baseline;\n\n    & > input {\n      flex: 1 0;\n    }\n    & > .add {\n      border: 1px dotted white;\n    }\n\n    & > .add {\n      height: 30px;\n      width: 100%;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      * {\n\n      }\n    }\n  }\n    & > label {\n      flex: 0 1;\n      padding: 0 5pt;\n    }\n  }\n`;\n\nconst Wrapper = styled.div`\n  font-size: 1em;\n  height: 100%;\n\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n\n  text-transform: uppercase;\n\n  input {\n    height: 30px;\n  }\n  select {\n    height: 30px;\n    width: 240px;\n    padding: 0 10pt;\n\n    option {\n      padding: 10pt;\n    }\n  }\n  h2 {\n    border: 0;\n    border-bottom: 2px solid white;\n    color: white;\n    font-size: 0.75em;\n    padding-top: 10pt;\n  }\n  .content {\n    height: 100%;\n\n    flex: 1 1;\n  }\n  div.players {\n    padding: 5pt;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: stretch;\n  }\n  .footer {\n    padding: 5pt;\n    flex: 0 1;\n    margin: 0 auto;\n    button {\n      border: 3px solid #d22f27;\n      background: #ea5a47;\n      cursor: pointer;\n      text-transform: uppercase;\n      cursor: pointer;\n      display: block;\n      height: 60px;\n      width: 240px;\n      color: white;\n    }\n  }\n\n  @media (max-width: ${breakpointSmall}) {\n    div.players {\n      flex-direction: column;\n      justify-content: flex-start;\n      align-items: stretch;\n    }\n    .footer {\n      margin: 0;\n\n      button {\n        width: 100%;\n      }\n    }\n  }\n`;\n\nexport const Form: React.FC = () => {\n  const { state, setState } = useSettingsContext();\n\n  const addOpponent = (key: number) => {\n    const opponents = state.opponents.map((opponent: string | undefined, index: number) => {\n      if (index === key) {\n        return ['Alice', 'Bob', 'Charley'][index];\n      }\n      return opponent;\n    });\n    setState({\n      ...state,\n      opponents,\n    });\n  };\n  const removeOpponent = (key: number) => {\n    const opponents = state.opponents.map((opponent: string | undefined, index: number) => {\n      if (index === key) {\n        return undefined;\n      }\n      return opponent;\n    });\n    setState({\n      ...state,\n      opponents,\n    });\n  };\n\n  const editOpponent = (key: number, value: string) => {\n    const opponents = state.opponents.map((opponent: string | undefined, index: number) => {\n      if (index === key) {\n        return value;\n      }\n      return opponent;\n    });\n    setState({\n      ...state,\n      opponents,\n    });\n  };\n\n  const editUser = (value: string) => {\n    setState({\n      ...state,\n      user: value,\n    });\n  };\n\n  const handleEditUser = (ev: React.FormEvent<HTMLInputElement>) => {\n    ev.preventDefault();\n    editUser(ev.currentTarget.value);\n  };\n\n  const handleAddOpponent = (ev: React.MouseEvent<HTMLElement>) => {\n    ev.preventDefault();\n    const defaultName = ['Alice', 'Bob', 'Charley'][state.opponents.length];\n\n    setState({\n      ...state,\n      opponents: [...state.opponents, defaultName],\n    });\n  };\n\n  const handleCardSelect = (ev: React.FormEvent<HTMLSelectElement>) => {\n    ev.preventDefault();\n    setState({\n      ...state,\n      cardNumber: parseInt(ev.currentTarget.value),\n    });\n  };\n\n  const history = useHistory();\n  const handleSubmit = (ev: React.FormEvent<HTMLButtonElement>) => {\n    ev.preventDefault();\n    if (state.opponents.every((opponent?: string) => opponent === undefined)) {\n      alert('You must select at least one opponent');\n      return;\n    }\n    history.push('/game');\n  };\n  return (\n    <Wrapper>\n      <div className=\"content\">\n        <h2>Opponents:</h2>\n        <div className=\"players them\">\n          {state.opponents.map((name: string | undefined, key: number) => {\n            const handleRemove = (ev: React.MouseEvent<HTMLElement>) => {\n              ev.preventDefault();\n              removeOpponent(key);\n            };\n            const handleEdit = (ev: React.FormEvent<HTMLInputElement>) => {\n              ev.preventDefault();\n              editOpponent(key, ev.currentTarget.value);\n            };\n            const handleAdd = (ev: React.MouseEvent<HTMLElement>) => {\n              ev.preventDefault();\n              addOpponent(key);\n            };\n            if (name !== undefined) {\n              return (\n                <Item key={key}>\n                  <input id={`input-${key}`} defaultValue={name} onChange={handleEdit} />\n                  <label className=\"clickable\" htmlFor={`input-${key}`} onClick={handleRemove}>\n                    remove\n                  </label>\n                </Item>\n              );\n            }\n            if (name === undefined) {\n              return (\n                <Item onClick={handleAdd}>\n                  <div className=\"add clickable\">\n                    <span>⊕</span>Add Opponent\n                  </div>\n                </Item>\n              );\n            }\n          })}\n          {state.opponents.length < 3 && (\n            <Item onClick={handleAddOpponent}>\n              <div className=\"add clickable\">\n                <span>⊕</span>Add Opponent\n              </div>\n            </Item>\n          )}\n        </div>\n        <h2>your name:</h2>\n        <div className=\"players them\">\n          <Item>\n            <input id={`input-me`} onChange={handleEditUser} defaultValue={state.user} />\n          </Item>\n        </div>\n        <h2>settings</h2>\n        <select onChange={handleCardSelect} value={state.cardNumber}>\n          <option value=\"1\">1 card</option>\n          <option value=\"3\">3 cards</option>\n          <option value=\"5\">5 cards</option>\n        </select>\n      </div>\n\n      <div className=\"footer\">\n        <button onClick={handleSubmit}>Play Top trumps</button>\n      </div>\n    </Wrapper>\n  );\n};\n","export const breakpointSmall = '620px';\n","import { OpenCard, BattleState, PlayerData } from './types';\nimport { SettingsState } from '../setup/settings';\n\nexport type BattleAction =\n  | { actionType: 'Noop' }\n  | { actionType: 'Reset'; settings: SettingsState }\n  | { actionType: 'StartLoading' }\n  | {\n      actionType: 'Loaded';\n      payload: Array<OpenCard[]>;\n    }\n  | { actionType: 'TakeTopCard' }\n  | { actionType: 'ShowLeaderHand' }\n  | { actionType: 'RollSkills' }\n  | { actionType: 'LetUserSelect' }\n  | { actionType: 'Select'; skillIndex: number }\n  | { actionType: 'ShowHand' }\n  | { actionType: 'StopBeforeShowHand' }\n  | { actionType: 'FindWinner' }\n  | { actionType: 'GiveHandToWinnerStack' }\n  | { actionType: 'EndTrick' }\n  | { actionType: 'StopBeforeEndGame' }\n  | { actionType: 'EndGame' };\n\nconst nextActiveIndex = (state: BattleState): number => {\n  const nextIndex = (state.activeIndex + 1) % state.players.length;\n  const nextPlayer = state.players[nextIndex];\n  if (!nextPlayer.hand && nextPlayer.stack.length === 0) {\n    return (state.activeIndex + 2) % state.players.length;\n  }\n  return nextIndex;\n};\n\nexport const battleReducer = (state: BattleState, action: BattleAction): BattleState => {\n  console.log('State:', state.phase, ' + ', action.actionType);\n  switch (action.actionType) {\n    case 'Reset':\n      const opponents: string[] = <string[]>action.settings.opponents.filter((name?: string) => name !== undefined);\n      return {\n        players: [\n          ...opponents.map(\n            (name: string): PlayerData => ({\n              name,\n              stack: [],\n              nature: 'bot',\n            }),\n          ),\n          {\n            name: action.settings.user,\n            stack: [],\n            nature: 'human',\n          },\n        ],\n        leaderIndex: 0,\n        activeIndex: 0,\n        phase: 'clear',\n      };\n    case 'TakeTopCard':\n      const allAliveHaveHands = state.players.every((player: PlayerData) => {\n        return player.hand || player.stack.length === 0;\n      });\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          if (key === state.activeIndex) {\n            if (player.hand === undefined) {\n              const hand = player.stack.slice(-1)[0];\n              const stack = player.stack.slice(0, -1);\n              return { ...player, stack, hand };\n            }\n          }\n          return player;\n        }),\n        activeIndex: allAliveHaveHands ? state.activeIndex : nextActiveIndex(state),\n        phase: allAliveHaveHands ? 'closed' : 'clear',\n      };\n\n    case 'StartLoading':\n      return {\n        ...state,\n        phase: 'loading',\n      };\n\n    case 'Loaded':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          return {\n            ...player,\n            stack: action.payload[key],\n          };\n        }),\n        phase: 'clear',\n      };\n\n    case 'ShowLeaderHand':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          if (key === state.leaderIndex) {\n            const hand = player.hand as OpenCard;\n            if (!hand) {\n              throw new Error('Leader has no hand so cannot show it');\n            }\n            const openHand: OpenCard = { ...hand, open: true };\n            return { ...player, hand: openHand };\n          }\n          return player;\n        }),\n        phase: 'one_open',\n      };\n\n    case 'RollSkills':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          if (key === state.leaderIndex) {\n            const hand = player.hand as OpenCard;\n            if (!hand) {\n              throw new Error('Leader has no hand so cannot roll it');\n            }\n            const openHand: OpenCard = { ...hand, rolling: true };\n            return { ...player, hand: openHand };\n          }\n          return player;\n        }),\n        phase: 'rolling',\n      };\n\n    case 'LetUserSelect':\n      return {\n        ...state,\n        phase: 'rolling_stopped',\n      };\n\n    case 'Select':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          if (key === state.leaderIndex) {\n            const hand = player.hand as OpenCard;\n            if (!hand) {\n              throw new Error('Leader has no hand so cannot roll it');\n            }\n            const openHand: OpenCard = { ...hand, rolling: false };\n            return { ...player, hand: openHand };\n          }\n          return player;\n        }),\n        phase: 'selected',\n        activeIndex: nextActiveIndex(state),\n        selectedSkill: action.skillIndex,\n      };\n\n    case 'ShowHand':\n      const stateAfterShowHand: BattleState = {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          if (key === state.activeIndex) {\n            const hand = player.hand as OpenCard;\n            if (!hand) {\n              throw new Error('Active player has no hand so cannot show it');\n            }\n            const openHand: OpenCard = { ...hand, open: true };\n            return { ...player, hand: openHand };\n          }\n          return player;\n        }),\n        phase: 'selected',\n\n        activeIndex: nextActiveIndex(state),\n      };\n      if (\n        stateAfterShowHand.players.every((player: PlayerData) => {\n          return player.hand === undefined || player.hand.open;\n        })\n      ) {\n        stateAfterShowHand.phase = 'all_open';\n      }\n      return stateAfterShowHand;\n\n    case 'StopBeforeShowHand':\n      return {\n        ...state,\n        phase: 'selected_stopped',\n      };\n\n    case 'FindWinner':\n      const selectedSkillValues = state.players.map((player: PlayerData) => {\n        if (!player.hand) {\n          return 0;\n        }\n        switch (state.selectedSkill) {\n          case 0:\n            return player.hand.skills.cargoCapacity;\n          case 1:\n            return player.hand.skills.hyperdriveRating;\n          case 2:\n            return player.hand.skills.costInCredits;\n          case 3:\n            return player.hand.skills.length;\n        }\n        return 0;\n      });\n\n      const max = Math.max(...selectedSkillValues);\n\n      const getMaxIndex = (values: number[], max: number) => {\n        for (let i = state.leaderIndex; i < values.length; i++) {\n          if (values[i] == max) {\n            return i;\n          }\n        }\n        for (let i = 0; i < values.length; i++) {\n          if (values[i] == max) {\n            return i;\n          }\n        }\n        throw new Error('Max value not found');\n      };\n      const winnerIndex = getMaxIndex(selectedSkillValues, max);\n      const playerHavingSomething = state.players.filter((player: PlayerData) => {\n        return player.hand || player.stack.length > 0;\n      });\n\n      const isFinal = playerHavingSomething.length < 2;\n      return {\n        ...state,\n        leaderIndex: winnerIndex,\n        activeIndex: (winnerIndex + 1) % state.players.length,\n        winnerIndex,\n        finalWinnerIndex: isFinal ? winnerIndex : undefined,\n      };\n\n    case 'GiveHandToWinnerStack':\n      const state1: BattleState = {\n        ...state,\n        players: state.players.map((player: PlayerData, key) => {\n          if (key === state.activeIndex) {\n            return {\n              ...player,\n              ghostHand: player.hand,\n              hand: undefined,\n            };\n          }\n          return player;\n        }),\n      };\n\n      const ghostHand = state.players[state.activeIndex].hand;\n\n      const state2 = ghostHand\n        ? {\n            ...state,\n            players: state1.players.map((player: PlayerData, key) => {\n              if (key === state.leaderIndex) {\n                return {\n                  ...player,\n                  stack: [ghostHand, ...player.stack],\n                };\n              }\n              return player;\n            }),\n          }\n        : state;\n\n      const allGaveTheirHands = state2.players.every((player: PlayerData) => {\n        return player.hand === undefined;\n      });\n\n      return {\n        ...state2,\n        phase: allGaveTheirHands ? 'finalize' : 'all_open',\n        activeIndex: nextActiveIndex(state),\n      };\n\n    case 'StopBeforeEndGame':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData) => {\n          return {\n            ...player,\n            ghostHand: undefined,\n          };\n        }),\n        phase: 'finalize_stopped',\n      };\n\n    case 'EndTrick':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData) => {\n          return {\n            ...player,\n            stack: player.stack.map((card: OpenCard) => {\n              return {\n                ...card,\n                open: false,\n              };\n            }),\n            ghostHand: undefined,\n            hand: undefined,\n          };\n        }),\n        winnerIndex: undefined,\n        activeIndex: state.leaderIndex,\n        phase: 'clear',\n        selectedSkill: undefined,\n      };\n    case 'EndGame':\n      return {\n        ...state,\n        players: state.players.map((player: PlayerData) => {\n          return {\n            ...player,\n            ghostHand: undefined,\n            hand: undefined,\n            stack: [],\n          };\n        }),\n        winnerIndex: undefined,\n        activeIndex: state.leaderIndex,\n        phase: 'clear',\n        selectedSkill: undefined,\n      };\n  }\n\n  return state;\n};\n\nexport const getNaturalAction = (state: BattleState): BattleAction => {\n  const activePlayer = state.players[state.activeIndex];\n  switch (state.phase) {\n    case 'clear':\n      const allHaveNothing = state.players.every((player: PlayerData) => {\n        return !player.hand && player.stack.length === 0;\n      });\n      if (allHaveNothing) {\n        return { actionType: 'StartLoading' };\n      }\n      return { actionType: 'TakeTopCard' };\n    case 'closed':\n      return { actionType: 'ShowLeaderHand' };\n    case 'one_open':\n      return { actionType: 'RollSkills' };\n    case 'rolling':\n      if (activePlayer.nature === 'human') {\n        return { actionType: 'LetUserSelect' };\n      }\n      return { actionType: 'Select', skillIndex: 1 };\n    case 'selected':\n      if (activePlayer.nature === 'human') {\n        return { actionType: 'StopBeforeShowHand' };\n      }\n      return { actionType: 'ShowHand' };\n    case 'all_open':\n      if (state.winnerIndex === undefined) {\n        return { actionType: 'FindWinner' };\n      }\n      return { actionType: 'GiveHandToWinnerStack' };\n    case 'finalize':\n      const playersStillHavingCards = state.players.filter((player: PlayerData) => {\n        return player.stack.length > 0 || player.hand;\n      });\n      if (playersStillHavingCards.length > 1) {\n        return { actionType: 'EndTrick' };\n      }\n      return { actionType: 'StopBeforeEndGame' };\n  }\n\n  return { actionType: 'Noop' };\n};\n","import React, { useState, useReducer } from 'react';\nimport { BattleState } from './types';\nimport { BattleAction, battleReducer } from './battle';\n\ntype Choice = () => void;\ntype Choices = Choice[];\n\nconst initialBattleState: BattleState = {\n  players: [\n    { name: 'gitanas nauseda', stack: [], nature: 'bot' },\n    { name: 'celofanas', stack: [], nature: 'bot' },\n    { name: 'luke 10x', stack: [], nature: 'human' },\n  ],\n  leaderIndex: 2,\n  activeIndex: 2,\n  phase: 'clear',\n};\n\ninterface BattleContextProps {\n  choices: Choices;\n  setChoices: (choices: Choices) => void;\n  state: BattleState;\n  dispatch: (action: BattleAction) => void;\n}\n\nexport const BattleContext = React.createContext<BattleContextProps>({\n  choices: [],\n  setChoices: () => {\n    console.error('😕 Context setter called before it is initialized');\n  },\n  state: initialBattleState,\n  dispatch: () => {\n    console.error('😕 Context dispatch called before it is initialized');\n  },\n});\n\nexport const BattleProvider: React.FC = (props: any) => {\n  const [choices, setChoices] = useState<Choices>([]);\n  const [state, dispatch] = useReducer<React.Reducer<BattleState, BattleAction>>(battleReducer, initialBattleState);\n\n  return (\n    <BattleContext.Provider\n      value={{\n        choices,\n        setChoices,\n        state,\n        dispatch,\n      }}\n    >\n      {props.children}\n    </BattleContext.Provider>\n  );\n};\n\nexport const useBattleContext = (): BattleContextProps => React.useContext(BattleContext);\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport { Card as CardType, OpenCard } from './types';\nimport { breakpointSmall } from './constants';\nimport { useBattleContext } from './BattleContext';\n\nconst Wrapper = styled.div`\n  height: 100%;\n  margin: 1px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n\n  background: #ffeb3b;\n  border: 3px solid #f1b31c;\n  border-radius: 5pt;\n  box-sizing: border-box;\n\n  .name {\n    font-size: 0.75em;\n  }\n  ul.scores {\n    padding-left: 0;\n    margin: 0;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n\n    list-style: none;\n    li.abilityLine {\n      :hover {\n        cursor: pointer;\n      }\n      padding: 10pt;\n      display: flex;\n      &.flash {\n        background: #f1b31c;\n      }\n      &.selected {\n        background: #f1b31c;\n      }\n      .ability {\n        flex: 1;\n        text-align: left;\n      }\n      .value {\n        padding-left: 10pt;\n        text-align: left;\n      }\n    }\n  }\n  @media (max-width: ${breakpointSmall}) {\n    ul.scores {\n      font-size: 0.75em;\n      display: flex;\n      flex-direction: row;\n      li.abilityLine {\n        flex-direction: column;\n        padding: 5pt;\n        .value {\n          padding-left: 0;\n        }\n      }\n    }\n  }\n`;\n\ninterface CardInfoProps {\n  card: CardType;\n}\n\nexport const CardInfo: React.FC<CardInfoProps> = (props: CardInfoProps) => {\n  const card = props.card as OpenCard;\n\n  const [flash, setFlash] = useState<number>(-1);\n\n  const {\n    state: { selectedSkill, phase },\n    choices,\n  } = useBattleContext();\n\n  const rolling = card.rolling && selectedSkill === undefined;\n  useEffect(() => {\n    if (rolling) {\n      setTimeout(() => {\n        setFlash((flash + 1) % 4);\n      }, 200);\n    } else if (selectedSkill !== undefined) {\n      setFlash(-1);\n    }\n  }, [flash, rolling, selectedSkill]);\n\n  const selectable = phase === 'rolling_stopped';\n\n  const handlers = choices.map((choice: () => void) => {\n    return (event: React.MouseEvent<HTMLElement>) => {\n      event?.preventDefault();\n      if (selectable) {\n        choice();\n      }\n    };\n  });\n\n  return (\n    <Wrapper className=\"card\">\n      <div className=\"name\">{card.name}</div>\n      <ul className=\"scores\">\n        <li\n          className={`abilityLine ${selectable ? 'selectable' : ''} ${flash === 0 ? 'flash' : ''} ${\n            selectedSkill === 0 ? 'selected' : ''\n          }`}\n          onClick={handlers[0]}\n        >\n          <span className=\"ability\">Cost:</span>\n          <span className=\"value\">{card.skills.costInCredits}</span>\n        </li>\n        <li\n          className={`abilityLine ${selectable ? 'selectable' : ''} ${flash === 1 ? 'flash' : ''} ${\n            selectedSkill === 1 ? 'selected' : ''\n          }`}\n          onClick={handlers[1]}\n        >\n          <span className=\"ability\">H-Rating:</span>\n          <span className=\"value\">{card.skills.hyperdriveRating}</span>\n        </li>\n        <li\n          className={`abilityLine ${selectable ? 'selectable' : ''} ${flash === 2 ? 'flash' : ''} ${\n            selectedSkill === 2 ? 'selected' : ''\n          }`}\n          onClick={handlers[2]}\n        >\n          <span className=\"ability\">Length:</span>\n          <span className=\"value\">{card.skills.length}</span>\n        </li>\n        <li\n          className={`abilityLine ${selectable ? 'selectable' : ''} ${flash === 3 ? 'flash' : ''} ${\n            selectedSkill === 3 ? 'selected' : ''\n          }`}\n          onClick={handlers[3]}\n        >\n          <span className=\"ability\">Cargo:</span>\n          <span className=\"value\">{card.skills.cargoCapacity}</span>\n        </li>\n      </ul>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport { PlayerProps } from './Player';\n\nexport const PlayerContext = React.createContext<PlayerProps>({\n  isHuman: true,\n  name: 'not set',\n  isWinner: false,\n  stackLength: 0,\n});\n\nexport const PlayerProvider: React.FC = (props: any) => {\n  return <PlayerContext.Provider value={props}>{props.children}</PlayerContext.Provider>;\n};\n\nexport const usePlayerContext = (): PlayerProps => React.useContext(PlayerContext);\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nimport { Card as CardType, OpenCard } from './types';\nimport ReactCardFlip from 'react-card-flip';\nimport { CardInfo } from './CardInfo';\nimport { useBattleContext } from './BattleContext';\nimport { usePlayerContext } from './PlayerContext';\n\nconst appear = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\n\nconst Wrapper = styled.div`\n  height: 100%;\n\n  .react-card-flip {\n    height: 100%;\n  }\n\n  .back {\n    animation: ${appear} 0.2s linear;\n    border: 3px solid #61b2e4;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 5pt;\n\n    box-sizing: border-box;\n    background: #92d3f5;\n    .text {\n      text-align: center;\n      color: #fff;\n    }\n  }\n  .active.back {\n    border: 3px solid #d22f27;\n    background: #ea5a47;\n    cursor: pointer;\n  }\n`;\n\ninterface CardProps {\n  card: CardType;\n}\n\nexport const Card: React.FC<CardProps> = (props: CardProps) => {\n  const card = props.card;\n  const openCard = card as OpenCard;\n\n  const { choices } = useBattleContext();\n\n  const { isHuman } = usePlayerContext();\n\n  const active = choices.length === 1 && isHuman;\n\n  const handleBackClick = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    if (active) {\n      const choiceCallback = choices[0];\n      choiceCallback();\n    }\n  };\n\n  return (\n    <Wrapper>\n      <ReactCardFlip isFlipped={openCard.open} flipDirection=\"horizontal\">\n        <div className={`back ${active ? 'active' : ''}`} onClick={handleBackClick}>\n          {active && <div className=\"text\">Show your card!</div>}\n        </div>\n        <CardInfo card={card} />\n      </ReactCardFlip>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Card } from './types';\nimport { Card as CardComponent } from './Card';\nimport { breakpointSmall } from './constants';\nimport { useBattleContext } from './BattleContext';\n\nconst shine = keyframes`\n  {\n    0% {\n      background: auto;\n    }\n    50% {\n      background: #ea5a47;\n    }\n    100% {\n      background: auto;\n    }\n  }\n`;\n\nconst disappear = keyframes`\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n`;\n\nconst partiallyDisappear = keyframes`\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0.5;\n  }\n`;\n\nconst Wrapper = styled.div`\n  margin-top: 5pt;\n  &:first-child {\n    margin-top: 0;\n  }\n\n  height: 100%;\n  .player {\n    &.out {\n      animation: ${partiallyDisappear} 0.2s linear;\n      opacity: 0.5;\n    }\n    &.winner {\n      cursor: pointer;\n    }\n    text-transform: uppercase;\n    border-radius: 5px;\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    .ghost {\n      animation: ${disappear} 0.2s linear;\n      opacity: 0;\n    }\n    .winner .card .selected {\n      animation: ${shine} 1s linear;\n      animation-iteration-count: infinite;\n    }\n    & > .title {\n      font-size: 0.75em;\n      padding: 6pt 0;\n\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      span.winner {\n        color: #d22f27;\n      }\n      & > .name {\n        text-align: left;\n      }\n      & > .stack::before {\n        content: '⨯ ';\n        color: #999;\n      }\n    }\n    background: white;\n    padding: 5pt;\n\n    width: 240px;\n    .player-content {\n      height: 220px;\n      & > div {\n        height: 100%;\n      }\n    }\n    @media (max-width: ${breakpointSmall}) {\n      width: auto;\n      min-width: 300px;\n      .player-content {\n        height: 100px;\n        .react-card-flip .react-card-back .card {\n          height: 100%;\n        }\n      }\n    }\n  }\n`;\n\nexport interface PlayerProps {\n  name: string;\n  card?: Card;\n  ghostCard?: Card;\n  stackLength: number;\n  isHuman: boolean;\n  isWinner: boolean;\n}\n\nexport const Player: React.FC<PlayerProps> = (props: PlayerProps) => {\n  const {\n    state: { phase },\n    choices,\n  } = useBattleContext();\n\n  const isFinalWinner = phase === 'finalize_stopped' && props.stackLength > 0;\n\n  const handlePlayerClick = (e: React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    if (!isFinalWinner) {\n      return;\n    }\n    const choice = choices[0];\n    choice();\n  };\n  const out = !props.card && props.stackLength === 0;\n  return (\n    <Wrapper>\n      <div className={`player ${out ? 'out' : ''} ${isFinalWinner ? 'winner' : ''}`} onClick={handlePlayerClick}>\n        <div className=\"title\">\n          <div className=\"name\">{props.name}</div>\n          <div className=\"stack\">{props.stackLength}</div>\n        </div>\n        <div className=\"player-content\">\n          {props.card && (\n            <div className={`hand ${props.isWinner ? 'winner' : ''}`}>\n              <CardComponent card={props.card} />\n            </div>\n          )}\n          {props.ghostCard && (\n            <div className=\"ghost\">\n              <CardComponent card={props.ghostCard} />\n            </div>\n          )}\n        </div>\n      </div>\n    </Wrapper>\n  );\n};\n","import spaceshipData from './spaceships.json';\nimport { OpenCard } from './types';\n\ninterface Spaceship {\n  name: string;\n  hyperdriveRating: number;\n  length: number;\n  costInCredits: number;\n  cargoCapacity: number;\n}\n\nconst spaceships = spaceshipData as Spaceship[];\n\nexport const loadRandomCards = (): OpenCard[] => {\n  const allCards: OpenCard[] = spaceships\n    .filter((s: Spaceship) => s.cargoCapacity && s.costInCredits && s.hyperdriveRating && s.length)\n    .sort(() => Math.random() - 0.5)\n    .map((spaceship: Spaceship) => {\n      return {\n        type: 'open',\n        name: spaceship.name,\n        skills: {\n          hyperdriveRating: spaceship.hyperdriveRating,\n          length: spaceship.length,\n          costInCredits: spaceship.costInCredits,\n          cargoCapacity: spaceship.cargoCapacity,\n        },\n        open: false,\n        rolling: false,\n      };\n    });\n  return allCards;\n\n};\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Player } from './Player';\nimport { breakpointSmall } from './constants';\nimport { getNaturalAction } from './battle';\nimport { PlayerData, OpenCard } from './types';\nimport { useBattleContext } from './BattleContext';\nimport { loadRandomCards } from './loader';\nimport { PlayerProvider } from './PlayerContext';\nimport { Link } from 'react-router-dom';\nimport { useSettingsContext } from '../setup/SettingsContext';\n\nconst playerDataToProps = (data: PlayerData, isWinner: boolean) => {\n  return {\n    name: data.name,\n    card: data.hand,\n    ghostCard: data.ghostHand,\n    stackLength: data.stack.length,\n    isHuman: data.nature === 'human',\n    isWinner: isWinner,\n  };\n};\nconst Winner = styled.div`\n  background: white;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  text-transform: uppercase;\n  .winner {\n    color: red;\n    flex: 0;\n  }\n`;\n\nconst Wrapper = styled.div`\n  font-size: 1em;\n  height: 100%;\n\n  display: flex;\n  flex-direction: column;\n\n  .content {\n    height: 100%;\n\n    flex: 1 1;\n  }\n  div.players {\n    padding: 5pt;\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n  }\n\n  .footer {\n    flex: 0 1;\n  }\n\n  @media (max-width: ${breakpointSmall}) {\n    div.players {\n      flex-direction: column;\n      justify-content: flex-start;\n      align-items: stretch;\n    }\n  }\n`;\n\nexport const Board: React.FC = () => {\n  const { state: settings } = useSettingsContext();\n\n  const { state, dispatch, setChoices } = useBattleContext();\n\n  const foes = state.players.slice(0, -1);\n  const me: PlayerData = state.players.slice(-1)[0];\n\n  const [tick, setTick] = useState<number>(0);\n\n  useEffect(() => {\n    dispatch({ actionType: 'Reset', settings });\n  }, [settings]);\n\n  useEffect(() => {\n    if (state.phase === 'loading') {\n      // TODO move this to apollo hook later\n      setTimeout(() => {\n        const randomCards = loadRandomCards();\n        const cardNumber = settings.cardNumber;\n        // const playerCount = state.players.length;\n\n        const payload = [];\n        for (let i = 0; i < state.players.length; i++) {\n          const stack = [];\n          for (let j = 0; j < cardNumber; j++) {\n            stack[j] = randomCards.shift() as OpenCard;\n          }\n          payload[i] = stack;\n        }\n        dispatch({\n          actionType: 'Loaded',\n          payload,\n        });\n        setTick(tick + 1);\n      }, 500);\n    } else if (state.phase === 'selected_stopped') {\n      setChoices([\n        () => {\n          dispatch({ actionType: 'ShowHand' });\n          setTimeout(() => {\n            setTick(tick + 1);\n          }, 600);\n        },\n      ]);\n    } else if (state.phase === 'rolling_stopped') {\n      setChoices([\n        () => {\n          dispatch({ actionType: 'Select', skillIndex: 0 });\n          setTimeout(() => {\n            setTick(tick + 1);\n          }, 600);\n        },\n        () => {\n          dispatch({ actionType: 'Select', skillIndex: 1 });\n          setTimeout(() => {\n            setTick(tick + 1);\n          }, 600);\n        },\n        () => {\n          dispatch({ actionType: 'Select', skillIndex: 2 });\n          setTimeout(() => {\n            setTick(tick + 1);\n          }, 600);\n        },\n        () => {\n          dispatch({ actionType: 'Select', skillIndex: 3 });\n          setTimeout(() => {\n            setTick(tick + 1);\n          }, 600);\n        },\n      ]);\n    } else if (state.phase === 'finalize_stopped') {\n      setChoices([\n        () => {\n          dispatch({ actionType: 'EndGame' });\n          setTick(tick + 1);\n        },\n      ]);\n    } else {\n      setChoices([]);\n    }\n  }, [state.phase]);\n\n  useEffect(() => {\n    const action = getNaturalAction(state);\n    dispatch(action);\n\n    if (action.actionType === 'StartLoading') {\n      return;\n    }\n\n    if (action.actionType === 'LetUserSelect') {\n      return;\n    }\n\n    if (action.actionType === 'StopBeforeShowHand') {\n      return;\n    }\n\n    if (action.actionType === 'StopBeforeEndGame') {\n      return;\n    }\n\n    const tickDelay = (() => {\n      if (action.actionType === 'RollSkills') {\n        return 2000;\n      }\n      if (action.actionType === 'FindWinner') {\n        return 4000;\n      }\n      return 600;\n    })();\n    setTimeout(() => {\n      setTick(tick + 1);\n    }, tickDelay);\n  }, [tick]);\n\n  if (state.phase === 'finalize_stopped') {\n    return (\n      <Winner>\n        <div className=\"winner\">Winner 🎉</div>\n        {state.winnerIndex !== undefined && <div className=\"\">{state.players[state.winnerIndex].name}</div>}\n        <Link to=\"/\">Back to settings</Link>\n      </Winner>\n    );\n  }\n\n  return (\n    <Wrapper>\n      <div className=\"content\">\n        <div className=\"players them\">\n          {foes.map((p: PlayerData, key: number) => {\n            const isWinner = key === state.winnerIndex;\n            const playerProps = playerDataToProps(p, isWinner);\n            return (\n              <PlayerProvider key={key} {...playerProps}>\n                <Player {...playerProps} />\n              </PlayerProvider>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"footer\">\n        <div className=\"players us\">\n          <Player {...playerDataToProps(me, state.winnerIndex === foes.length)} />\n        </div>\n      </div>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport './App.css';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport { Form } from './setup/Form';\nimport { Board } from './toptrumps/Board';\nimport { BattleProvider } from './toptrumps/BattleContext';\nimport { SettingsProvider } from './setup/SettingsContext';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <SettingsProvider>\n        <Router basename=\"/toptrumps\">\n          <Switch>\n            <Route path=\"/game\">\n              <BattleProvider>\n                <Board />\n              </BattleProvider>\n            </Route>\n            <Route path=\"/\">\n              <Form />\n            </Route>\n          </Switch>\n        </Router>\n      </SettingsProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}